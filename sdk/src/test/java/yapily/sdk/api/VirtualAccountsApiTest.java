/*
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yapily.sdk.api;

import yapily.sdk.*;
import yapily.sdk.auth.*;
import yapily.sdk.models.ApiListResponseOfVirtualAccount;
import yapily.sdk.models.ApiListResponseOfVirtualAccountBeneficiary;
import yapily.sdk.models.ApiListResponseOfVirtualAccountPayment;
import yapily.sdk.models.ApiResponseError;
import yapily.sdk.models.ApiResponseOfVirtualAccount;
import yapily.sdk.models.ApiResponseOfVirtualAccountBeneficiary;
import yapily.sdk.models.ApiResponseOfVirtualAccountPayInDetails;
import yapily.sdk.models.ApiResponseOfVirtualAccountPayment;
import java.time.OffsetDateTime;
import java.util.UUID;
import yapily.sdk.models.VirtualAccountBeneficiaryRequest;
import yapily.sdk.models.VirtualAccountPayOutRequest;
import yapily.sdk.models.VirtualAccountRequest;
import yapily.sdk.models.VirtualAccountTransferRequest;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualAccountsApi
 */
public class VirtualAccountsApiTest {

    private final VirtualAccountsApi api = new VirtualAccountsApi();

    /**
     * Create Account
     *
     * Create a new virtual account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVirtualAccountTest() throws ApiException {
        //UUID clientId = null;
        //VirtualAccountRequest virtualAccountRequest = null;
        //ApiResponseOfVirtualAccount response = api.createVirtualAccount(clientId, virtualAccountRequest);
        // TODO: test validations
    }

    /**
     * Create Beneficiary
     *
     * Create a new beneficiary (individual or business account) to which a Pay Out can be made. The beneficiary can be used from any virtual account that is held
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVirtualAccountBeneficiaryTest() throws ApiException {
        //UUID clientId = null;
        //VirtualAccountBeneficiaryRequest virtualAccountBeneficiaryRequest = null;
        //ApiResponseOfVirtualAccountBeneficiary response = api.createVirtualAccountBeneficiary(clientId, virtualAccountBeneficiaryRequest);
        // TODO: test validations
    }

    /**
     * Create Pay Out
     *
     * Initiate a payment from a specified virtual account to a previously added beneficiary using any of the schemes that it supports &lt;br&gt; When subscribed to virtualAccount.payOut.status notifications, further updates on payment processing status will be develivered asynchronously 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVirtualAccountPayOutTest() throws ApiException {
        //String idempotencyKey = null;
        //UUID clientId = null;
        //VirtualAccountPayOutRequest virtualAccountPayOutRequest = null;
        //ApiResponseOfVirtualAccountPayment response = api.createVirtualAccountPayOut(idempotencyKey, clientId, virtualAccountPayOutRequest);
        // TODO: test validations
    }

    /**
     * Create Virtual Account Transfer
     *
     * Create a transfer between two virtual accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVirtualAccountTransferTest() throws ApiException {
        //String idempotencyKey = null;
        //UUID clientId = null;
        //VirtualAccountTransferRequest virtualAccountTransferRequest = null;
        //ApiResponseOfVirtualAccountPayment response = api.createVirtualAccountTransfer(idempotencyKey, clientId, virtualAccountTransferRequest);
        // TODO: test validations
    }

    /**
     * Get Pay-In Details
     *
     * Get the details of a pay-in transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPayInDetailsTest() throws ApiException {
        //String paymentId = null;
        //ApiResponseOfVirtualAccountPayInDetails response = api.getPayInDetails(paymentId);
        // TODO: test validations
    }

    /**
     * Get Payment
     *
     * Get the details of a specific payment using its Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentsByIdTest() throws ApiException {
        //String id = null;
        //UUID clientId = null;
        //ApiResponseOfVirtualAccountPayment response = api.getPaymentsById(id, clientId);
        // TODO: test validations
    }

    /**
     * Get List Of Beneficiaries
     *
     * Gets the list of beneficiaries (individual or business account) to which a Pay Out can be made.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVirtualAccountBeneficiariesTest() throws ApiException {
        //UUID clientId = null;
        //String cursor = null;
        //ApiListResponseOfVirtualAccountBeneficiary response = api.getVirtualAccountBeneficiaries(clientId, cursor);
        // TODO: test validations
    }

    /**
     * Get Beneficiary
     *
     * Get the details of a specific beneficiary (individual or business account) to which a Pay Out can be made from its id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVirtualAccountBeneficiaryTest() throws ApiException {
        //String beneficiaryId = null;
        //UUID clientId = null;
        //ApiResponseOfVirtualAccountBeneficiary response = api.getVirtualAccountBeneficiary(beneficiaryId, clientId);
        // TODO: test validations
    }

    /**
     * Get Account
     *
     * Get the details of a specific account using its Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVirtualAccountByIdTest() throws ApiException {
        //String accountId = null;
        //UUID clientId = null;
        //ApiResponseOfVirtualAccount response = api.getVirtualAccountById(accountId, clientId);
        // TODO: test validations
    }

    /**
     * Get Payments
     *
     * Retrieve a list of virtual account payments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVirtualAccountPaymentsTest() throws ApiException {
        //UUID clientId = null;
        //String accountId = null;
        //OffsetDateTime createdDateTimeFrom = null;
        //OffsetDateTime createdDateTimeTo = null;
        //List<String> status = null;
        //List<String> type = null;
        //String cursor = null;
        //ApiListResponseOfVirtualAccountPayment response = api.getVirtualAccountPayments(clientId, accountId, createdDateTimeFrom, createdDateTimeTo, status, type, cursor);
        // TODO: test validations
    }

    /**
     * Get Accounts
     *
     * Retrieve a list of all virtual accounts held
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVirtualAccountsTest() throws ApiException {
        //UUID clientId = null;
        //String nickname = null;
        //String currency = null;
        //String status = null;
        //String cursor = null;
        //ApiListResponseOfVirtualAccount response = api.getVirtualAccounts(clientId, nickname, currency, status, cursor);
        // TODO: test validations
    }

}
