/*
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.13.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yapily.sdk.api;

import yapily.sdk.*;
import yapily.sdk.auth.*;
import yapily.sdk.models.AccountApiListResponse;
import yapily.sdk.models.ApiListResponseOfAccountStatement;
import yapily.sdk.models.ApiListResponseOfBeneficiary;
import yapily.sdk.models.ApiListResponseOfCategory;
import yapily.sdk.models.ApiListResponseOfDirectDebitResponse;
import yapily.sdk.models.ApiListResponseOfPaymentResponse;
import yapily.sdk.models.ApiListResponseOfTransaction;
import yapily.sdk.models.ApiResponseError;
import yapily.sdk.models.ApiResponseOfAccount;
import yapily.sdk.models.ApiResponseOfAccountStatement;
import yapily.sdk.models.ApiResponseOfBalances;
import yapily.sdk.models.ApiResponseOfIdentity;
import java.io.File;
import yapily.sdk.models.SortEnum;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FinancialDataApi
 */
public class FinancialDataApiTest {

    private final FinancialDataApi api = new FinancialDataApi();

    /**
     * Get Account
     *
     * Used to return the account and balance information for the end user associated with the presented consent token.&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNTS&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        //String accountId = null;
        //String consent = null;
        //String psuId = null;
        //String psuCorporateId = null;
        //String psuIpAddress = null;
        //Boolean raw = null;
        //ApiResponseOfAccount response = api.getAccount(accountId, consent, psuId, psuCorporateId, psuIpAddress, raw);
        // TODO: test validations
    }

    /**
     * Get Account Balances
     *
     * Used to return the balance for the end user associated with the presented consent token.&lt;br&gt;&lt;br&gt; __Note__: This endpoint is only for obtaining the balance information of an account belonging to an &#x60;Institution&#x60; that exposes their APIs through the [CBI Globe Gateway](https://docs.yapily.com/pages/knowledge/open-banking/cbi_globe//). If the &#x60;Institution&#x60; you wish to obtain balance data is not in the CBI Globe, use [Get Account](https://docs.yapily.com/api/reference/#operation/getAccount) or [Get Accounts](https://docs.yapily.com/api/reference/#operation/getAccounts) to get balance data. &lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_BALANCES&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountBalancesTest() throws ApiException {
        //String accountId = null;
        //String consent = null;
        //String psuId = null;
        //String psuCorporateId = null;
        //String psuIpAddress = null;
        //Boolean raw = null;
        //ApiResponseOfBalances response = api.getAccountBalances(accountId, consent, psuId, psuCorporateId, psuIpAddress, raw);
        // TODO: test validations
    }

    /**
     * Get Account Direct Debits
     *
     * Used to get the list of direct debits for an account.&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_DIRECT_DEBIT&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountDirectDebitsTest() throws ApiException {
        //String accountId = null;
        //String consent = null;
        //Integer limit = null;
        //Boolean raw = null;
        //ApiListResponseOfDirectDebitResponse response = api.getAccountDirectDebits(accountId, consent, limit, raw);
        // TODO: test validations
    }

    /**
     * Get Account Periodic Payments
     *
     * Used to get the list of periodic payments (standing orders in the UK) for an account.&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_PERIODIC_PAYMENTS&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPeriodicPaymentsTest() throws ApiException {
        //String accountId = null;
        //String consent = null;
        //Integer limit = null;
        //Boolean raw = null;
        //ApiListResponseOfPaymentResponse response = api.getAccountPeriodicPayments(accountId, consent, limit, raw);
        // TODO: test validations
    }

    /**
     * Get Account Scheduled Payments
     *
     * Used to get the list of scheduled payments for an account.&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_SCHEDULED_PAYMENT&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountScheduledPaymentsTest() throws ApiException {
        //String accountId = null;
        //String consent = null;
        //Integer limit = null;
        //Boolean raw = null;
        //ApiListResponseOfPaymentResponse response = api.getAccountScheduledPayments(accountId, consent, limit, raw);
        // TODO: test validations
    }

    /**
     * Get Accounts
     *
     * Used to return all accounts and balances for the end user associated with the presented consent token.&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNTS&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        //String consent = null;
        //String psuId = null;
        //String psuCorporateId = null;
        //String psuIpAddress = null;
        //Boolean raw = null;
        //AccountApiListResponse response = api.getAccounts(consent, psuId, psuCorporateId, psuIpAddress, raw);
        // TODO: test validations
    }

    /**
     * Get Account Beneficiaries
     *
     * Used to get all the beneficiaries of a user&#39;s account&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_BENEFICIARIES&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBeneficiariesTest() throws ApiException {
        //String accountId = null;
        //String consent = null;
        //Boolean raw = null;
        //ApiListResponseOfBeneficiary response = api.getBeneficiaries(accountId, consent, raw);
        // TODO: test validations
    }

    /**
     * Get Categories
     *
     * Used to retrieve the list of categories returned by the Yapily Categorisation engine for a given locale. &lt;br&gt;&lt;br&gt;See [Data Enrichment](https://docs.yapily.com/pages/key-concepts/account-data/data-enrichment/intro-to-data-enrichment/) for more information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCategoriesTest() throws ApiException {
        //String country = null;
        //ApiListResponseOfCategory response = api.getCategories(country);
        // TODO: test validations
    }

    /**
     * Get Identity
     *
     * Used to get the identity information for an account.&lt;br&gt;&lt;br&gt;Feature: &#x60;IDENTITY&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdentityTest() throws ApiException {
        //String consent = null;
        //Boolean raw = null;
        //ApiResponseOfIdentity response = api.getIdentity(consent, raw);
        // TODO: test validations
    }

    /**
     * Get Account Statement
     *
     * Used to get a statement for an account.&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_STATEMENT&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatementTest() throws ApiException {
        //String consent = null;
        //String accountId = null;
        //String statementId = null;
        //Boolean raw = null;
        //ApiResponseOfAccountStatement response = api.getStatement(consent, accountId, statementId, raw);
        // TODO: test validations
    }

    /**
     * Get Account Statement File
     *
     * Used to get the statement file for an account.&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_STATEMENT_FILE&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatementFileTest() throws ApiException {
        //String consent = null;
        //String accountId = null;
        //String statementId = null;
        //Boolean raw = null;
        //File response = api.getStatementFile(consent, accountId, statementId, raw);
        // TODO: test validations
    }

    /**
     * Get Account Statements
     *
     * Used to get the list of statements for an account.&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_STATEMENTS&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatementsTest() throws ApiException {
        //String consent = null;
        //String accountId = null;
        //String from = null;
        //String before = null;
        //Integer limit = null;
        //SortEnum sort = null;
        //Integer offset = null;
        //Boolean raw = null;
        //ApiListResponseOfAccountStatement response = api.getStatements(consent, accountId, from, before, limit, sort, offset, raw);
        // TODO: test validations
    }

    /**
     * Get Account Transactions
     *
     * Used to get the account transactions for an account&lt;br&gt;&lt;br&gt;Feature: &#x60;ACCOUNT_TRANSACTIONS&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        //String accountId = null;
        //String consent = null;
        //String psuId = null;
        //String psuCorporateId = null;
        //String psuIpAddress = null;
        //List<String> with = null;
        //String from = null;
        //String before = null;
        //Integer limit = null;
        //SortEnum sort = null;
        //Integer offset = null;
        //String cursor = null;
        //Boolean raw = null;
        //ApiListResponseOfTransaction response = api.getTransactions(accountId, consent, psuId, psuCorporateId, psuIpAddress, with, from, before, limit, sort, offset, cursor, raw);
        // TODO: test validations
    }

}
